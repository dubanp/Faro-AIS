"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
const errors_1 = require("./errors");
const ais_sentence_1 = __importDefault(require("./ais-sentence"));
const ais_bitfield_1 = __importDefault(require("./ais-bitfield"));
const ais_message_123_1 = __importDefault(require("./messages/ais-message-123"));
const ais_message_4_1 = __importDefault(require("./messages/ais-message-4"));
const ais_message_5_1 = __importDefault(require("./messages/ais-message-5"));
const ais_message_18_1 = __importDefault(require("./messages/ais-message-18"));
const ais_message_24_1 = __importDefault(require("./messages/ais-message-24"));
const defaultOptions = {
    silent: false
};
class AisDecoder extends stream_1.Transform {
    constructor(options, transformOptions) {
        super(transformOptions);
        this.multiPartBuffer = [];
        this.options = { ...defaultOptions, ...options };
        this.setEncoding('utf8');
    }
    _transform(chunk, encoding, callback) {
        try {
            const message = chunk.toString(this.readableEncoding);
            const sentence = new ais_sentence_1.default(message);
            if (sentence.isMultiPart()) {
                this.handleMultiPartSentence(sentence);
            }
            else {
                this.decodePayload(sentence.payload, sentence.channel);
            }
            return callback();
        }
        catch (err) {
            if (err instanceof errors_1.DecodingError && this.options.silent) {
                return callback();
            }
            return callback(err);
        }
    }
    handleMultiPartSentence(sentence) {
        this.multiPartBuffer.push(sentence);
        if (sentence.isLastPart()) {
            if (this.multiPartBuffer.length !== sentence.numParts) {
                this.multiPartBuffer.length = 0;
                throw new errors_1.DecodingError('Incorrect multipart order', sentence);
            }
            const payloads = this.multiPartBuffer.map(multiPartSentence => multiPartSentence.payload);
            this.decodePayload(payloads.join(''), sentence.channel);
            this.multiPartBuffer.length = 0;
        }
    }
    // eslint-disable-next-line complexity
    decodePayload(payload, channel) {
        const bitField = new ais_bitfield_1.default(payload);
        const messageType = bitField.getInt(0, 6);
        let decodedMessage = null;
        switch (messageType) {
            case 1:
            case 2:
            case 3:
                decodedMessage = new ais_message_123_1.default(messageType, channel, bitField);
                break;
            case 4:
                decodedMessage = new ais_message_4_1.default(messageType, channel, bitField);
                break;
            case 5:
                decodedMessage = new ais_message_5_1.default(messageType, channel, bitField);
                break;
            case 18:
                decodedMessage = new ais_message_18_1.default(messageType, channel, bitField);
                break;
            case 24:
                decodedMessage = new ais_message_24_1.default(messageType, channel, bitField);
                break;
        }
        if (decodedMessage) {
            this.push(JSON.stringify(decodedMessage));
        }
    }
}
exports.default = AisDecoder;
//# sourceMappingURL=ais-decoder.js.map
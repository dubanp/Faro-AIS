"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("./errors");
class AisSentence {
    // eslint-disable-next-line max-statements
    constructor(message) {
        this.startIndex = message.indexOf('!');
        if (this.startIndex === -1) {
            throw new errors_1.DecodingError('Start not found', this);
        }
        this.message = message.slice(this.startIndex + 1);
        const messageFields = this.message.split(',');
        if (messageFields.length !== 7) {
            throw new errors_1.DecodingError('Invalid length', this);
        }
        const suffix = messageFields[6].split('*');
        if (suffix.length !== 2) {
            throw new errors_1.DecodingError('Invalid suffix', this);
        }
        this.talkerId = messageFields[0].substr(0, 2);
        this.type = messageFields[0].substr(2, 5);
        this.numParts = Number(messageFields[1]);
        this.partNumber = Number(messageFields[2]);
        this.partId = Number(messageFields[3]);
        this.channel = messageFields[4];
        this.payload = messageFields[5];
        this.fillBits = Number(suffix[0]);
        this.checksum = suffix[1];
        this.checkChecksum();
    }
    isMultiPart() {
        return this.numParts > 1;
    }
    isLastPart() {
        return this.numParts === this.partNumber;
    }
    checkChecksum() {
        const checksumString = this.message.split('*')[0];
        let checksum = 0;
        for (let i = 0; i < checksumString.length; i++) {
            // eslint-disable-next-line no-bitwise
            checksum = checksum ^ checksumString.charCodeAt(i);
        }
        const checksumHex = checksum.toString(16).toUpperCase();
        if (checksumHex !== this.checksum) {
            throw new errors_1.DecodingError('Invalid checksum', this);
        }
    }
}
exports.default = AisSentence;
//# sourceMappingURL=ais-sentence.js.map